// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: swipes.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Swipes_CreateOrUpdateSwipe_FullMethodName = "/Swipes/CreateOrUpdateSwipe"
	Swipes_GetUnreadSwipes_FullMethodName     = "/Swipes/GetUnreadSwipes"
)

// SwipesClient is the client API for Swipes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwipesClient interface {
	CreateOrUpdateSwipe(ctx context.Context, in *CreateOrUpdateSwipeReq, opts ...grpc.CallOption) (*CreateOrUpdateSwipeRes, error)
	GetUnreadSwipes(ctx context.Context, in *GetUnreadSwipesReq, opts ...grpc.CallOption) (*GetUnreadSwipesRes, error)
}

type swipesClient struct {
	cc grpc.ClientConnInterface
}

func NewSwipesClient(cc grpc.ClientConnInterface) SwipesClient {
	return &swipesClient{cc}
}

func (c *swipesClient) CreateOrUpdateSwipe(ctx context.Context, in *CreateOrUpdateSwipeReq, opts ...grpc.CallOption) (*CreateOrUpdateSwipeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateSwipeRes)
	err := c.cc.Invoke(ctx, Swipes_CreateOrUpdateSwipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swipesClient) GetUnreadSwipes(ctx context.Context, in *GetUnreadSwipesReq, opts ...grpc.CallOption) (*GetUnreadSwipesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnreadSwipesRes)
	err := c.cc.Invoke(ctx, Swipes_GetUnreadSwipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwipesServer is the server API for Swipes service.
// All implementations must embed UnimplementedSwipesServer
// for forward compatibility.
type SwipesServer interface {
	CreateOrUpdateSwipe(context.Context, *CreateOrUpdateSwipeReq) (*CreateOrUpdateSwipeRes, error)
	GetUnreadSwipes(context.Context, *GetUnreadSwipesReq) (*GetUnreadSwipesRes, error)
	mustEmbedUnimplementedSwipesServer()
}

// UnimplementedSwipesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwipesServer struct{}

func (UnimplementedSwipesServer) CreateOrUpdateSwipe(context.Context, *CreateOrUpdateSwipeReq) (*CreateOrUpdateSwipeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateSwipe not implemented")
}
func (UnimplementedSwipesServer) GetUnreadSwipes(context.Context, *GetUnreadSwipesReq) (*GetUnreadSwipesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadSwipes not implemented")
}
func (UnimplementedSwipesServer) mustEmbedUnimplementedSwipesServer() {}
func (UnimplementedSwipesServer) testEmbeddedByValue()                {}

// UnsafeSwipesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwipesServer will
// result in compilation errors.
type UnsafeSwipesServer interface {
	mustEmbedUnimplementedSwipesServer()
}

func RegisterSwipesServer(s grpc.ServiceRegistrar, srv SwipesServer) {
	// If the following call pancis, it indicates UnimplementedSwipesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Swipes_ServiceDesc, srv)
}

func _Swipes_CreateOrUpdateSwipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateSwipeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwipesServer).CreateOrUpdateSwipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swipes_CreateOrUpdateSwipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwipesServer).CreateOrUpdateSwipe(ctx, req.(*CreateOrUpdateSwipeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swipes_GetUnreadSwipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadSwipesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwipesServer).GetUnreadSwipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swipes_GetUnreadSwipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwipesServer).GetUnreadSwipes(ctx, req.(*GetUnreadSwipesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Swipes_ServiceDesc is the grpc.ServiceDesc for Swipes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Swipes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Swipes",
	HandlerType: (*SwipesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateSwipe",
			Handler:    _Swipes_CreateOrUpdateSwipe_Handler,
		},
		{
			MethodName: "GetUnreadSwipes",
			Handler:    _Swipes_GetUnreadSwipes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swipes.proto",
}
